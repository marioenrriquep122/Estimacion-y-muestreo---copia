import React, { useState } from 'react';
import { calculateConfidenceInterval } from '../utils/statsCalc';
//este es el componente final o la vista fianl donde cargamos todos los componentes en esta vista
const Calculos = ({ 
  initialMean = 0, 
  initialStdDev = 0, 
  initialSampleSize = 0,
  isAutoGenerated = false
}) => {
  const [mean, setMean] = useState(initialMean.toString());
  const [stdDev, setStdDev] = useState(initialStdDev.toString());
  const [sampleSize, setSampleSize] = useState(initialSampleSize.toString());
  const [confidenceLevel, setConfidenceLevel] = useState(95);
  const [result, setResult] = useState(null);

  const handleSubmit = (e) => {
    e.preventDefault();
    const interval = calculateConfidenceInterval({
      mean: parseFloat(mean),
      stdDev: parseFloat(stdDev),
      sampleSize: parseInt(sampleSize),
      confidenceLevel
    });
    setResult(interval);
  };

  return (
    <div className="bg-white rounded-xl shadow-md p-6 border border-blue-200">
      <h2 className="text-2xl font-bold text-gray-800 mb-4">
        {isAutoGenerated ? 'Resultados del Intervalo' : 'Calculadora de Intervalo'}
      </h2>
      
      {isAutoGenerated ? (
        <div className="space-y-4">
          <div className="p-4 bg-blue-50 border border-blue-100 rounded-lg">
            <p className="text-gray-700">
              Los datos estadísticos calculados son:
              <br />
              - Media: {initialMean.toFixed(2)}
              <br />
              - Desviación estándar: {initialStdDev.toFixed(2)}
              <br />
              - Tamaño muestral: {initialSampleSize}
            </p>
          </div>
          
          <div className="mt-4">
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Nivel de confianza
            </label>
            <select
              value={confidenceLevel}
              onChange={(e) => setConfidenceLevel(parseInt(e.target.value))}
              className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="90">90%</option>
              <option value="95">95%</option>
              <option value="99">99%</option>
            </select>
          </div>
          
          <button
            onClick={handleSubmit}
            className="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors"
          >
            Calcular Intervalo
          </button>
        </div>
      ) : (
        <form onSubmit={handleSubmit} className="space-y-4">
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Media muestral</label>
              <input
                type="number"
                value={mean}
                onChange={(e) => setMean(e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Desviación estándar</label>
              <input
                type="number"
                value={stdDev}
                onChange={(e) => setStdDev(e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                required
              />
            </div>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Tamaño muestral (n)</label>
              <input
                type="number"
                value={sampleSize}
                onChange={(e) => setSampleSize(e.target.value)}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                required
              />
            </div>
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">Nivel de confianza (%)</label>
              <select
                value={confidenceLevel}
                onChange={(e) => setConfidenceLevel(parseInt(e.target.value))}
                className="w-full px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
              >
                <option value="90">90%</option>
                <option value="95">95%</option>
                <option value="99">99%</option>
              </select>
            </div>
          </div>
          <button
            type="submit"
            className="w-full bg-blue-600 hover:bg-blue-700 text-white font-medium py-2 px-4 rounded-lg transition-colors"
          >
            Calcular intervalo
          </button>
        </form>
      )}

      {result && (
        <div className="mt-6 p-4 bg-blue-50 border border-blue-100 rounded-lg">
          <h3 className="text-lg font-semibold text-blue-800 mb-2">Resultado:</h3>
          <p className="text-gray-700">
            El intervalo de confianza del {confidenceLevel}% es: [{result.lower.toFixed(2)}, {result.upper.toFixed(2)}]
          </p>
          <p className="text-sm mt-2 text-gray-500">
            Margen de error: ±{result.margin.toFixed(2)}
          </p>
        </div>
      )}
    </div>
  );
};

export default Calculos;

// DONE