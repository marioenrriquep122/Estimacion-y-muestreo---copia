import React, { useState, useEffect } from 'react';
import { calculateConfidenceInterval } from '../utils/statsCalc';

// Vista principal mejorada visualmente manteniendo la funcionalidad original
const Calculos = ({ 
  initialMean = 0, 
  initialStdDev = 0, 
  initialSampleSize = 0,
  isAutoGenerated = false
}) => {
  // Estados originales mantenidos
  const [mean, setMean] = useState(initialMean.toString());
  const [stdDev, setStdDev] = useState(initialStdDev.toString());
  const [sampleSize, setSampleSize] = useState(initialSampleSize.toString());
  const [confidenceLevel, setConfidenceLevel] = useState(95);
  const [result, setResult] = useState(null);
  
  // Nuevos estados para mejoras visuales
  const [isCalculating, setIsCalculating] = useState(false);
  const [activeTab, setActiveTab] = useState('input'); // 'input' o 'result'
  
  // Función del formulario original
  const handleSubmit = (e) => {
    e.preventDefault();
    setIsCalculating(true);
    
    // Simulamos un breve cálculo para mostrar el efecto de carga
    setTimeout(() => {
      const interval = calculateConfidenceInterval({
        mean: parseFloat(mean),
        stdDev: parseFloat(stdDev),
        sampleSize: parseInt(sampleSize),
        confidenceLevel
      });
      setResult(interval);
      setIsCalculating(false);
      setActiveTab('result');
    }, 500);
  };
  
  // Función para formatear números con 2 decimales
  const formatNumber = (num) => {
    return parseFloat(num).toFixed(2);
  };
  
  useEffect(() => {
    // Si hay resultado, automáticamente cambiamos a la pestaña de resultados
    if (result) {
      setActiveTab('result');
    }
  }, [result]);
  
  return (
    <div className="bg-gradient-to-br from-white to-blue-50 rounded-2xl shadow-lg p-6 border border-blue-200">
      {/* Encabezado */}
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center">
          <div className="bg-blue-600 w-1.5 h-10 rounded-full mr-3"></div>
          <h2 className="text-2xl font-bold text-gray-800">
            {isAutoGenerated ? 'Resultados del Intervalo' : 'Calculadora de Intervalo'}
          </h2>
        </div>
        
        {/* Icono decorativo */}
        <div className="w-10 h-10 rounded-full bg-blue-100 flex items-center justify-center">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
          </svg>
        </div>
      </div>
      
      {/* Pestañas de navegación */}
      {result && (
        <div className="flex border-b border-gray-200 mb-6">
          <button
            className={`px-4 py-2 font-medium text-sm mr-2 rounded-t-lg transition ${
              activeTab === 'input' 
                ? 'bg-white text-blue-600 border-t border-l border-r border-gray-200' 
                : 'text-gray-500 hover:text-gray-700'
            }`}
            onClick={() => setActiveTab('input')}
          >
            Datos
          </button>
          <button
            className={`px-4 py-2 font-medium text-sm rounded-t-lg transition ${
              activeTab === 'result' 
                ? 'bg-white text-blue-600 border-t border-l border-r border-gray-200' 
                : 'text-gray-500 hover:text-gray-700'
            }`}
            onClick={() => setActiveTab('result')}
          >
            Resultados
          </button>
        </div>
      )}
      
      <div className={activeTab === 'input' ? 'block' : 'hidden'}>
        {isAutoGenerated ? (
          <div className="space-y-6">
            {/* Panel de datos estadísticos */}
            <div className="p-5 bg-white border border-blue-100 rounded-xl shadow-sm">
              <h3 className="text-lg font-semibold text-gray-700 mb-3 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                </svg>
                Estadísticas de la muestra
              </h3>
              
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="bg-gray-50 p-3 rounded-lg border border-gray-100">
                  <div className="text-xs text-gray-500 uppercase tracking-wide">Media</div>
                  <div className="text-lg font-mono font-bold text-blue-600">{formatNumber(initialMean)}</div>
                </div>
                
                <div className="bg-gray-50 p-3 rounded-lg border border-gray-100">
                  <div className="text-xs text-gray-500 uppercase tracking-wide">Desviación estándar</div>
                  <div className="text-lg font-mono font-bold text-blue-600">{formatNumber(initialStdDev)}</div>
                </div>
                
                <div className="bg-gray-50 p-3 rounded-lg border border-gray-100">
                  <div className="text-xs text-gray-500 uppercase tracking-wide">Tamaño muestral</div>
                  <div className="text-lg font-mono font-bold text-blue-600">{initialSampleSize}</div>
                </div>
              </div>
            </div>
            
            {/* Selector de nivel de confianza */}
            <div className="bg-white p-5 rounded-xl border border-blue-100 shadow-sm">
              <label className="block text-base font-medium text-gray-700 mb-3">
                Nivel de confianza
              </label>
              <div className="flex items-center space-x-4">
                {[90, 95, 99].map((level) => (
                  <label 
                    key={level}
                    className={`flex-1 border ${
                      confidenceLevel === level 
                        ? 'bg-blue-50 border-blue-300 ring-2 ring-blue-200' 
                        : 'border-gray-200 hover:bg-gray-50'
                    } rounded-lg p-3 cursor-pointer transition flex items-center justify-center`}
                  >
                    <input
                      type="radio"
                      className="sr-only"
                      value={level}
                      checked={confidenceLevel === level}
                      onChange={() => setConfidenceLevel(level)}
                    />
                    <div className="text-center">
                      <span className={`text-lg font-bold ${confidenceLevel === level ? 'text-blue-600' : 'text-gray-700'}`}>
                        {level}%
                      </span>
                      <div className={`h-1 w-16 mt-1 rounded-full ${
                        confidenceLevel === level 
                          ? 'bg-blue-500'
                          : 'bg-gray-200'
                      }`}></div>
                    </div>
                  </label>
                ))}
              </div>
            </div>
            
            <button
              onClick={handleSubmit}
              disabled={isCalculating}
              className={`w-full ${
                isCalculating 
                  ? 'bg-blue-400 cursor-not-allowed' 
                  : 'bg-blue-600 hover:bg-blue-700'
              } text-white font-medium py-3 px-4 rounded-xl transition-colors flex items-center justify-center`}
            >
              {isCalculating ? (
                <>
                  <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Calculando...
                </>
              ) : (
                'Calcular Intervalo'
              )}
            </button>
          </div>
        ) : (
          <form onSubmit={handleSubmit} className="space-y-6 bg-white p-6 rounded-xl shadow-sm border border-blue-100">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Media muestral</label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none text-gray-400">
                    <span className="text-sm">x̄</span>
                  </div>
                  <input
                    type="number"
                    value={mean}
                    onChange={(e) => setMean(e.target.value)}
                    className="w-full pl-8 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
                    required
                    placeholder="Ej: 75.4"
                  />
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Desviación estándar</label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none text-gray-400">
                    <span className="text-sm">σ</span>
                  </div>
                  <input
                    type="number"
                    value={stdDev}
                    onChange={(e) => setStdDev(e.target.value)}
                    className="w-full pl-8 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
                    required
                    placeholder="Ej: 12.7"
                  />
                </div>
              </div>
            </div>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Tamaño muestral (n)</label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none text-gray-400">
                    <span className="text-sm">n</span>
                  </div>
                  <input
                    type="number"
                    value={sampleSize}
                    onChange={(e) => setSampleSize(e.target.value)}
                    className="w-full pl-8 pr-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
                    required
                    placeholder="Ej: 30"
                  />
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Nivel de confianza (%)</label>
                <div className="flex items-center space-x-2">
                  {[90, 95, 99].map((level) => (
                    <label 
                      key={level}
                      className={`flex-1 border ${
                        confidenceLevel === level 
                          ? 'bg-blue-50 border-blue-300 ring-2 ring-blue-200' 
                          : 'border-gray-200 hover:bg-gray-50'
                      } rounded-lg py-3 cursor-pointer transition flex items-center justify-center`}
                    >
                      <input
                        type="radio"
                        className="sr-only"
                        value={level}
                        checked={confidenceLevel === level}
                        onChange={() => setConfidenceLevel(level)}
                      />
                      <span className={`text-lg font-medium ${confidenceLevel === level ? 'text-blue-600' : 'text-gray-700'}`}>
                        {level}%
                      </span>
                    </label>
                  ))}
                </div>
              </div>
            </div>
            <button
              type="submit"
              disabled={isCalculating}
              className={`w-full ${
                isCalculating 
                  ? 'bg-blue-400 cursor-not-allowed' 
                  : 'bg-blue-600 hover:bg-blue-700'
              } text-white font-medium py-3 px-4 rounded-lg transition-colors flex items-center justify-center`}
            >
              {isCalculating ? (
                <>
                  <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Calculando...
                </>
              ) : (
                'Calcular intervalo'
              )}
            </button>
          </form>
        )}
      </div>
      
      <div className={activeTab === 'result' ? 'block' : 'hidden'}>
        {result && (
          <div className="space-y-6">
            {/* Resultado principal */}
            <div className="bg-white border border-blue-100 rounded-xl p-6 shadow-sm">
              <h3 className="text-lg font-semibold text-blue-800 mb-4">Intervalo de confianza</h3>
              
              <div className="flex flex-col md:flex-row items-center justify-center space-y-4 md:space-y-0 md:space-x-4">
                <div className="flex items-center justify-center">
                  <span className="text-2xl text-gray-400 mr-2">[</span>
                  <div className="bg-blue-50 px-4 py-2 rounded-lg border border-blue-100">
                    <span className="text-lg font-mono font-bold text-blue-700">{result.lower.toFixed(2)}</span>
                  </div>
                  <span className="text-2xl text-gray-400 mx-2">,</span>
                  <div className="bg-blue-50 px-4 py-2 rounded-lg border border-blue-100">
                    <span className="text-lg font-mono font-bold text-blue-700">{result.upper.toFixed(2)}</span>
                  </div>
                  <span className="text-2xl text-gray-400 ml-2">]</span>
                </div>
              </div>
              
              <div className="mt-4 text-center">
                <span className="text-sm text-gray-600">con nivel de confianza del</span>
                <span className="mx-1 px-2 py-0.5 bg-blue-100 text-blue-800 rounded font-medium">{confidenceLevel}%</span>
              </div>
              
              <div className="mt-6 flex justify-center">
                <div className="relative w-4/5 h-4 bg-gray-100 rounded-full overflow-hidden">
                  <div 
                    className="absolute h-full bg-gradient-to-r from-blue-400 to-blue-600 transition-all"
                    style={{width: `${(confidenceLevel === 90 ? 90 : confidenceLevel === 95 ? 95 : 99)}%`}}
                  ></div>
                </div>
              </div>
            </div>
            
            {/* Detalles adicionales */}
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="bg-white p-4 rounded-xl border border-blue-100 shadow-sm">
                <h4 className="text-sm font-medium text-gray-500 uppercase tracking-wide mb-3">Margen de error</h4>
                <div className="flex items-center">
                  <span className="text-lg font-medium">±</span>
                  <span className="text-2xl font-mono font-bold text-blue-600 ml-1">{result.margin.toFixed(2)}</span>
                </div>
              </div>
              
              <div className="bg-white p-4 rounded-xl border border-blue-100 shadow-sm">
                <h4 className="text-sm font-medium text-gray-500 uppercase tracking-wide mb-3">Amplitud del intervalo</h4>
                <div className="flex items-center">
                  <span className="text-2xl font-mono font-bold text-blue-600">{(result.upper - result.lower).toFixed(2)}</span>
                </div>
              </div>
            </div>
            
            {/* Botón para nuevo cálculo */}
            <button
              onClick={() => setActiveTab('input')}
              className="w-full border border-blue-300 text-blue-600 hover:bg-blue-50 font-medium py-3 px-4 rounded-lg transition-colors flex items-center justify-center"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 15l-3-3m0 0l3-3m-3 3h8M3 12a9 9 0 1118 0 9 9 0 01-18 0z" />
              </svg>
              Modificar datos
            </button>
          </div>
        )}
      </div>
      
      {/* Nota informativa */}
      <div className="mt-6 bg-gray-50 p-4 rounded-lg border border-gray-200">
        <div className="flex">
          <svg xmlns="http://www.w3.org/2000/svg" className="flex-shrink-0 h-5 w-5 text-blue-500 mt-0.5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <p className="text-xs text-gray-600">
            El intervalo de confianza es una estimación estadística que representa el rango donde, con una cierta probabilidad (nivel de confianza), 
            se encuentra el verdadero valor de un parámetro poblacional.
          </p>
        </div>
      </div>
    </div>
  );
};

export default Calculos;