// Calculos.jsx
import React, { useState, useEffect, useMemo } from 'react';
import { calculateConfidenceInterval, calculateTwoPopulationInterval } from '../utils/statsCalc';
import { showSuccess, showValidationError } from '../utils/alerts';
import { useValidation, STATS_VALIDATION_RULES } from '../hooks/useValidation';
import { useErrorHandler } from '../hooks/useErrorHandler';
import { CONFIDENCE_LEVELS } from '../constants';

const Calculos = ({ 
  initialMean = 0, 
  initialStdDev = 0, 
  initialSampleSize = 0,
  isAutoGenerated = false,
  pop1,
  pop2,
  onIntervalCalculated,
}) => {
  const [mean, setMean] = useState(initialMean.toString());
  const [stdDev, setStdDev] = useState(initialStdDev.toString());
  const [sampleSize, setSampleSize] = useState(initialSampleSize.toString());
  const [confidenceLevel, setConfidenceLevel] = useState(95);
  const [result, setResult] = useState(null);
  const [isCalculating, setIsCalculating] = useState(false);
  const [activeTab, setActiveTab] = useState('input');

  const { handleError } = useErrorHandler();

  // Memoizar las reglas de validación para evitar recreaciones
  const validationRules = useMemo(() => {
    // Si hay dos poblaciones, no validar (devolver objeto vacío)
    if (pop1 && pop2) return {};
    
    // Si no, usar las reglas estándar
    return STATS_VALIDATION_RULES;
  }, [pop1, pop2]);

  // Memoizar los valores para evitar recreaciones
  const validationValues = useMemo(() => ({
    mean,
    stdDev,
    sampleSize
  }), [mean, stdDev, sampleSize]);

  const { errors, isValid } = useValidation(validationValues, validationRules);

  useEffect(() => {
    if (pop1 && pop2) {
      setMean('');
      setStdDev('');
      setSampleSize('');
    }
  }, [pop1, pop2]);

  // Actualizar valores iniciales cuando cambien las props
  useEffect(() => {
    setMean(initialMean.toString());
    setStdDev(initialStdDev.toString());
    setSampleSize(initialSampleSize.toString());
  }, [initialMean, initialStdDev, initialSampleSize]);

  // Recalcular automáticamente cuando cambie el nivel de confianza
  useEffect(() => {
    if (result && !isCalculating) {
      handleRecalculate();
    }
  }, [confidenceLevel]);

  // Función para recalcular automáticamente
  const handleRecalculate = async () => {
    if (!result) return;

    setIsCalculating(true);
    try {
      let calculationResult;

      if (pop1 && pop2) {
        calculationResult = await calculateTwoPopulationInterval({
          pop1,
          pop2,
          confidenceLevel
        });
        calculationResult.type = 'twoPopulations';
      } else {
        calculationResult = await calculateConfidenceInterval({
          mean: parseFloat(mean),
          stdDev: parseFloat(stdDev),
          sampleSize: parseInt(sampleSize),
          confidenceLevel,
        });
      }

      setResult(calculationResult);
      
      // Comunicar el cambio al componente padre
      if (onIntervalCalculated) {
        onIntervalCalculated(calculationResult);
      }

    } catch (error) {
      await handleError(error, 'recálculo de intervalo');
    } finally {
      setIsCalculating(false);
    }
  };

  // Función mejorada para manejar el submit
  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // Validar antes de calcular (solo para población única)
    if (!pop1 && !pop2 && !isValid) {
      await showValidationError(
        'Datos incompletos',
        'Por favor, corrige los errores antes de continuar.'
      );
      return;
    }

    setIsCalculating(true);

    try {
      let calculationResult;

      if (pop1 && pop2) {
        calculationResult = await calculateTwoPopulationInterval({
          pop1,
          pop2,
          confidenceLevel
        });
        calculationResult.type = 'twoPopulations';
      } else {
        calculationResult = await calculateConfidenceInterval({
          mean: parseFloat(mean),
          stdDev: parseFloat(stdDev),
          sampleSize: parseInt(sampleSize),
          confidenceLevel,
        });
      }

      setResult(calculationResult);
      setActiveTab('result');

      // Comunicar el resultado al componente padre
      if (onIntervalCalculated) {
        onIntervalCalculated(calculationResult);
      }

      // Mostrar mensaje de éxito
      await showSuccess(
        '¡Cálculo exitoso!',
        'El intervalo de confianza ha sido calculado correctamente.'
      );

    } catch (error) {
      await handleError(error, 'cálculo de intervalo');
    } finally {
      setIsCalculating(false);
    }
  };

  const formatNumber = (num) => parseFloat(num).toFixed(2);

  return (
    <div className="bg-gradient-to-br from-white to-blue-50 rounded-2xl shadow-lg p-6 border border-blue-200">
      <div className="flex items-center justify-between mb-6">
        <div className="flex items-center">
          <div className="bg-blue-600 w-1.5 h-10 rounded-full mr-3"></div>
          <h2 className="text-2xl font-bold text-gray-800">
            {pop1 && pop2 ? 'Intervalo para Diferencia' : isAutoGenerated ? 'Resultados del Intervalo' : 'Calculadora de Intervalo'}
          </h2>
        </div>
        <div className="w-10 h-10 rounded-full bg-blue-100 flex items-center justify-center">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6 text-blue-600" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z" />
          </svg>
        </div>
      </div>

      {/* Mostrar nivel de confianza actual siempre visible */}
      <div className="mb-4 p-3 bg-blue-50 rounded-lg border border-blue-200">
        <div className="flex items-center justify-between">
          <span className="text-sm font-medium text-blue-800">Nivel de confianza actual:</span>
          <span className="px-3 py-1 bg-blue-600 text-white rounded-full text-sm font-bold">
            {confidenceLevel}%
          </span>
        </div>
      </div>

      {/* Selector de nivel de confianza siempre visible */}
      <div className="bg-white p-5 rounded-xl border border-blue-100 shadow-sm mb-6">
        <label className="block text-base font-medium text-gray-700 mb-3">
          Ajustar nivel de confianza
          {result && (
            <span className="ml-2 text-sm text-blue-600">(se recalculará automáticamente)</span>
          )}
        </label>
        <div className="flex items-center space-x-4">
          {Object.keys(CONFIDENCE_LEVELS).map((level) => (
            <label 
              key={level}
              className={`flex-1 border ${
                confidenceLevel === parseInt(level) 
                  ? 'bg-blue-50 border-blue-300 ring-2 ring-blue-200' 
                  : 'border-gray-200 hover:bg-gray-50'
              } rounded-lg p-3 cursor-pointer transition flex items-center justify-center ${
                isCalculating ? 'opacity-50 cursor-not-allowed' : ''
              }`}
            >
              <input
                type="radio"
                className="sr-only"
                value={level}
                checked={confidenceLevel === parseInt(level)}
                onChange={() => !isCalculating && setConfidenceLevel(parseInt(level))}
                disabled={isCalculating}
              />
              <div className="text-center">
                <span className={`text-lg font-bold ${confidenceLevel === parseInt(level) ? 'text-blue-600' : 'text-gray-700'}`}>
                  {level}%
                </span>
                <div className={`h-1 w-16 mt-1 rounded-full ${
                  confidenceLevel === parseInt(level) 
                    ? 'bg-blue-500'
                    : 'bg-gray-200'
                }`}></div>
              </div>
            </label>
          ))}
        </div>
        {isCalculating && (
          <div className="mt-2 flex items-center justify-center text-sm text-blue-600">
            <svg className="animate-spin -ml-1 mr-2 h-4 w-4" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
              <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
              <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
            </svg>
            Recalculando intervalo...
          </div>
        )}
      </div>

      <div className={activeTab === 'input' ? 'block' : 'hidden'}>
        {pop1 && pop2 ? (
          <div className="space-y-6">
            {/* Mostrar datos de las dos poblaciones */}
            <div className="p-5 bg-white border border-blue-100 rounded-xl shadow-sm">
              <h3 className="text-lg font-semibold text-gray-700 mb-3 flex items-center">
                <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2 text-blue-500" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                </svg>
                Estadísticas de las poblaciones
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="bg-gray-50 p-3 rounded-lg border border-gray-100">
                  <div className="flex items-center space-x-2">
                    <span className="text-sm text-gray-500">x̄₁</span>
                    <div className="text-xs text-gray-500 uppercase tracking-wide">Media Población 1</div>
                  </div>
                  <div className="text-lg font-mono font-bold text-blue-600">{formatNumber(pop1.mean)}</div>
                </div>
                <div className="bg-gray-50 p-3 rounded-lg border border-gray-100">
                  <div className="flex items-center space-x-2">
                    <span className="text-sm text-gray-500">σ₁</span>
                    <div className="text-xs text-gray-500 uppercase tracking-wide">Desviación estándar 1</div>
                  </div>
                  <div className="text-lg font-mono font-bold text-blue-600">{formatNumber(pop1.stdDev)}</div>
                </div>
                <div className="bg-gray-50 p-3 rounded-lg border border-gray-100">
                  <div className="flex items-center space-x-2">
                    <span className="text-sm text-gray-500">n₁</span>
                    <div className="text-xs text-gray-500 uppercase tracking-wide">Tamaño muestral 1</div>
                  </div>
                  <div className="text-lg font-mono font-bold text-blue-600">{pop1.sampleSize}</div>
                </div>
                <div className="bg-gray-50 p-3 rounded-lg border border-gray-100">
                  <div className="flex items-center space-x-2">
                    <span className="text-sm text-gray-500">x̄₂</span>
                    <div className="text-xs text-gray-500 uppercase tracking-wide">Media Población 2</div>
                  </div>
                  <div className="text-lg font-mono font-bold text-blue-600">{formatNumber(pop2.mean)}</div>
                </div>
                <div className="bg-gray-50 p-3 rounded-lg border border-gray-100">
                  <div className="flex items-center space-x-2">
                    <span className="text-sm text-gray-500">σ₂</span>
                    <div className="text-xs text-gray-500 uppercase tracking-wide">Desviación estándar 2</div>
                  </div>
                  <div className="text-lg font-mono font-bold text-blue-600">{formatNumber(pop2.stdDev)}</div>
                </div>
                <div className="bg-gray-50 p-3 rounded-lg border border-gray-100">
                  <div className="flex items-center space-x-2">
                    <span className="text-sm text-gray-500">n₂</span>
                    <div className="text-xs text-gray-500 uppercase tracking-wide">Tamaño muestral 2</div>
                  </div>
                  <div className="text-lg font-mono font-bold text-blue-600">{pop2.sampleSize}</div>
                </div>
              </div>
            </div>

            <button
              onClick={handleSubmit}
              disabled={isCalculating}
              className={`w-full ${
                isCalculating 
                  ? 'bg-blue-400 cursor-not-allowed' 
                  : 'bg-blue-600 hover:bg-blue-700'
              } text-white font-medium py-3 px-4 rounded-xl transition-colors flex items-center justify-center`}
            >
              {isCalculating ? (
                <>
                  <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Calculando...
                </>
              ) : (
                'Calcular Intervalo'
              )}
            </button>
          </div>
        ) : (
          /* Formulario para población única */
          <form onSubmit={handleSubmit} className="space-y-6 bg-white p-6 rounded-xl shadow-sm border border-blue-100">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Media muestral</label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none text-gray-400">
                    <span className="text-sm">x̄</span>
                  </div>
                  <input
                    type="number"
                    step="0.01"
                    value={mean}
                    onChange={(e) => setMean(e.target.value)}
                    className={`w-full pl-8 pr-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all ${
                      errors.mean ? 'border-red-300 bg-red-50' : 'border-gray-300'
                    }`}
                    required
                    placeholder="Ej: 75.4"
                  />
                  {errors.mean && (
                    <p className="mt-1 text-sm text-red-600">{errors.mean}</p>
                  )}
                </div>
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Desviación estándar</label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none text-gray-400">
                    <span className="text-sm">σ</span>
                  </div>
                  <input
                    type="number"
                    step="0.01"
                    value={stdDev}
                    onChange={(e) => setStdDev(e.target.value)}
                    className={`w-full pl-8 pr-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all ${
                      errors.stdDev ? 'border-red-300 bg-red-50' : 'border-gray-300'
                    }`}
                    required
                    placeholder="Ej: 12.7"
                  />
                  {errors.stdDev && (
                    <p className="mt-1 text-sm text-red-600">{errors.stdDev}</p>
                  )}
                </div>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">Tamaño muestral (n)</label>
                <div className="relative">
                  <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none text-gray-400">
                    <span className="text-sm">n</span>
                  </div>
                  <input
                    type="number"
                    value={sampleSize}
                    onChange={(e) => setSampleSize(e.target.value)}
                    className={`w-full pl-8 pr-4 py-3 border rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all ${
                      errors.sampleSize ? 'border-red-300 bg-red-50' : 'border-gray-300'
                    }`}
                    required
                    placeholder="Ej: 30"
                  />
                  {errors.sampleSize && (
                    <p className="mt-1 text-sm text-red-600">{errors.sampleSize}</p>
                  )}
                </div>
              </div>
            </div>

            <button
              type="submit"
              disabled={isCalculating || !isValid}
              className={`w-full ${
                isCalculating || !isValid
                  ? 'bg-blue-400 cursor-not-allowed' 
                  : 'bg-blue-600 hover:bg-blue-700'
              } text-white font-medium py-3 px-4 rounded-lg transition-colors flex items-center justify-center`}
            >
              {isCalculating ? (
                <>
                  <svg className="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Calculando...
                </>
              ) : (
                'Calcular intervalo'
              )}
            </button>
          </form>
        )}
      </div>

      {/* Resto del código para mostrar resultados permanece igual */}
      {result && (
        <div className={activeTab === 'result' ? 'block' : 'hidden'}>
          <div className="space-y-6">
            <div className="bg-white border border-blue-100 rounded-xl p-6 shadow-sm">
              <h3 className="text-lg font-semibold text-blue-800 mb-4">Intervalo de confianza</h3>
              <div className="flex flex-col md:flex-row items-center justify-center space-y-4 md:space-y-0 md:space-x-4">
                <div className="flex items-center justify-center">
                  <span className="text-2xl text-gray-400 mr-2">[</span>
                  <div className="bg-blue-50 px-4 py-2 rounded-lg border border-blue-100">
                    <span className="text-lg font-mono font-bold text-blue-700">{formatNumber(result.lower)}</span>
                  </div>
                  <span className="text-2xl text-gray-400 mx-2">,</span>
                  <div className="bg-blue-50 px-4 py-2 rounded-lg border border-blue-100">
                    <span className="text-lg font-mono font-bold text-blue-700">{formatNumber(result.upper)}</span>
                  </div>
                  <span className="text-2xl text-gray-400 ml-2">]</span>
                </div>
              </div>
              <div className="mt-4 text-center">
                <span className="text-sm text-gray-600">con nivel de confianza del</span>
                <span className="mx-1 px-2 py-0.5 bg-blue-100 text-blue-800 rounded font-medium">{confidenceLevel}%</span>
              </div>
              <div className="mt-6 flex justify-center">
                <div className="relative w-4/5 h-4 bg-gray-100 rounded-full overflow-hidden">
                  <div 
                    className="absolute h-full bg-gradient-to-r from-blue-400 to-blue-600 transition-all"
                    style={{width: `${confidenceLevel}%`}}
                  ></div>
                </div>
              </div>
            </div>
            {result.type === 'twoPopulations' && (
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="bg-white p-4 rounded-xl border border-blue-100 shadow-sm">
                  <h4 className="text-sm font-medium text-gray-500 uppercase tracking-wide mb-3">Diferencia de medias</h4>
                  <div className="flex items-center">
                    <span className="text-2xl font-mono font-bold text-blue-600">{formatNumber(result.diffMean)}</span>
                  </div>
                </div>
                <div className="bg-white p-4 rounded-xl border border-blue-100 shadow-sm">
                  <h4 className="text-sm font-medium text-gray-500 uppercase tracking-wide mb-3">Margen de error</h4>
                  <div className="flex items-center">
                    <span className="text-lg font-medium">±</span>
                    <span className="text-2xl font-mono font-bold text-blue-600 ml-1">{formatNumber(result.margin)}</span>
                  </div>
                </div>
              </div>
            )}
            <button
              onClick={() => setActiveTab('input')}
              className="w-full border border-blue-300 text-blue-600 hover:bg-blue-50 font-medium py-3 px-4 rounded-lg transition-colors flex items-center justify-center"
            >
              <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M11 15l-3-3m0 0l3-3m-3 3h8M3 12a9 9 0 1118 0 9 9 0 01-18 0z" />
              </svg>
              Modificar datos
            </button>
          </div>
        </div>
      )}

      <div className="mt-6 bg-gray-50 p-4 rounded-lg border border-gray-200">
        <div className="flex">
          <svg xmlns="http://www.w3.org/2000/svg" className="flex-shrink-0 h-5 w-5 text-blue-500 mt-0.5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
          </svg>
          <p className="text-xs text-gray-600">
            {result?.type === 'twoPopulations' 
              ? 'El intervalo de confianza muestra el rango donde, con un cierto nivel de confianza, se encuentra la diferencia entre las medias de las dos poblaciones.'
              : 'El intervalo de confianza es una estimación estadística que representa el rango donde, con una cierta probabilidad, se encuentra el verdadero valor de un parámetro poblacional.'}
          </p>
        </div>
      </div>
    </div>
  );
};

export default Calculos;