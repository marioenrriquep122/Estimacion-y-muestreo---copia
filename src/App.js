import React, { useState, useMemo, useCallback } from "react";
import Principal from "./components/Principal";
import SeleccionDeDatos from "./components/SeleccionDeDatos";
import Calculos from "./components/Calculos";
import GraficaDeIntervalos from "./components/GraficaDeIntervalos";
import InfoPanel from "./components/InfoPanel";
import DataDisplay from "./components/DataDisplay";

const BACKGROUND_IMAGE_URL =
  "https://4tsix0yujj.ufs.sh/f/2vMRHqOYUHc0om3zHsOgDjdvqUQH6XhKYIiaSc3LCtrM1fen";
const Z_SCORE_95_CONFIDENCE = 1.96;

const App = () => {
  const [userName, setUserName] = useState("");
  const [isDataReady, setIsDataReady] = useState(false);
  const [stats, setStats] = useState(null);
  const [showNameForm, setShowNameForm] = useState(false);

  const backgroundStyle = useMemo(() => ({
    backgroundImage: `url('${BACKGROUND_IMAGE_URL}')`,
    backgroundSize: "cover",
    backgroundPosition: "center",
    backgroundAttachment: "fixed",
    backgroundBlendMode: "overlay",
    backgroundColor: "rgba(255, 255, 255, 0.9)",
  }), []);

  // Intervalo de confianza
  const confidenceInterval = useMemo(() => {
    if (!stats) return null;
    const { mean, stdDev, sampleSize } = stats;
    const standardError = stdDev / Math.sqrt(sampleSize);
    return {
      lower: mean - Z_SCORE_95_CONFIDENCE * standardError,
      upper: mean + Z_SCORE_95_CONFIDENCE * standardError,
    };
  }, [stats]);

  const onDataReady = useCallback((data) => {
    if (
      data &&
      typeof data.mean === "number" &&
      typeof data.stdDev === "number" &&
      data.sampleSize > 0
    ) {
      setStats(data);
      setIsDataReady(true);
    }
  }, []);

  const onResetData = useCallback(() => {
    setIsDataReady(false);
    setStats(null);
  }, []);

  const onChangeName = useCallback(() => {
    setShowNameForm(true);
  }, []);

  const onNameSubmit = useCallback((name) => {
    const trimmed = name.trim();
    if (trimmed) {
      setUserName(trimmed);
      setShowNameForm(false);
      localStorage.setItem("userName", trimmed);
    }
  }, []);

  const onResetApp = useCallback(() => {
    setUserName("");
    setIsDataReady(false);
    setStats(null);
    localStorage.removeItem("userName");
  }, []);

  if (showNameForm || !userName) {
    return <Principal onNameSubmit={onNameSubmit} initialName={userName} />;
  }

  if (!isDataReady) {
    return (
      <div className="min-h-screen bg-gray-50" style={backgroundStyle}>
        <SeleccionDeDatos
          userName={userName}
          onDataReady={onDataReady}
          onBack={onChangeName}
        />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50" style={backgroundStyle}>
      <div className="max-w-4xl mx-auto py-8 px-4">
        <header className="mb-8 bg-white rounded-xl shadow-lg p-6 backdrop-blur-sm bg-opacity-90 border border-gray-200">
          <div className="flex justify-between items-center">
            <div>
              <h1 className="text-3xl font-bold text-gray-800 font-serif">
                Intervalos De ConfianzaPro
              </h1>
              <p className="text-gray-600 mt-1">
                Usuario:{" "}
                <span className="font-medium text-blue-600">{userName}</span>
              </p>
            </div>
            <div className="flex gap-3">
              <button
                onClick={onChangeName}
                className="text-sm bg-blue-600 hover:bg-blue-700 text-white py-2 px-4 rounded-lg transition-colors shadow-md"
              >
                Cambiar usuario
              </button>
              <button
                onClick={onResetApp}
                className="text-sm bg-gray-600 hover:bg-gray-700 text-white py-2 px-4 rounded-lg transition-colors shadow-md"
              >
                Reiniciar todo
              </button>
            </div>
          </div>
        </header>

        <main className="space-y-6">
          {stats?.generatedData && <DataDisplay data={stats.generatedData} />}

          <Calculos
            initialMean={stats?.mean || 0}
            initialStdDev={stats?.stdDev || 0}
            initialSampleSize={stats?.sampleSize || 0}
            isAutoGenerated={!!stats?.generatedData}
          />

          {confidenceInterval && (
            <GraficaDeIntervalos interval={confidenceInterval} />
          )}

          <InfoPanel />

          <div className="flex gap-4 justify-center">
            <button
              onClick={onResetData}
              className="bg-blue-600 hover:bg-blue-700 text-white font-medium py-3 px-8 rounded-lg transition-colors shadow-md flex items-center gap-2"
              aria-label="Iniciar nueva prueba"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                className="h-5 w-5"
                viewBox="0 0 20 20"
                fill="currentColor"
                aria-hidden="true"
              >
                <path
                  fillRule="evenodd"
                  d="M4 2a1 1 0 011 1v2.101a7.002 7.002 0 0111.601 2.566 1 1 0 11-1.885.666A5.002 5.002 0 005.999 7H9a1 1 0 010 2H4a1 1 0 01-1-1V3a1 1 0 011-1zm.008 9.057a1 1 0 011.276.61A5.002 5.002 0 0014.001 13H11a1 1 0 110-2h5a1 1 0 011 1v5a1 1 0 11-2 0v-2.101a7.002 7.002 0 01-11.601-2.566 1 1 0 01.61-1.276z"
                  clipRule="evenodd"
                />
              </svg>
              Nueva prueba
            </button>
          </div>
        </main>
      </div>
    </div>
  );
};

export default App;
